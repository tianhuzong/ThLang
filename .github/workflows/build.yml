name: Cross-Platform Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up LLVM 18 on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-18 llvm-18-dev clang-18 lld-18
          echo "/usr/lib/llvm-18/bin" >> $GITHUB_PATH
          echo "LLVM_DIR=/usr/lib/llvm-18/lib/cmake/llvm" >> $GITHUB_ENV

      - name: Set up Windows build environment
        if: runner.os == 'Windows'
        run: |
          # 安装必要工具
          choco install -y llvm  git cmake bison winflexbison3 --no-progress
          
          # 设置环境变量
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "LLVM_DIR=C:\Program Files\LLVM\lib\cmake\llvm" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CMAKE_PREFIX_PATH=C:\Program Files\LLVM" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PATH=$env:PATH;C:\Program Files\CMake\bin;C:\Program Files\Git\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Set up LLVM 18 on macOS
        if: runner.os == 'macOS'
        run: |
          brew install llvm@18
          echo "LLVM_DIR=/opt/homebrew/opt/llvm@18/lib/cmake/llvm" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/opt/homebrew/opt/llvm@18" >> $GITHUB_ENV
          echo "/opt/homebrew/opt/llvm@18/bin" >> $GITHUB_PATH
          echo "LDFLAGS=-L/opt/homebrew/opt/llvm@18/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/opt/homebrew/opt/llvm@18/include" >> $GITHUB_ENV

      - name: Build on Linux
        if: runner.os == 'Linux'
        run: |
          ls 
          pwd
          chmod +x build.sh
          export LLVM_CONFIG=llvm-config-18
          ./build.sh

      - name: Build on macOS
        if: runner.os == 'macOS'
        run: |
          ls
          pwd
          chmod +x build.sh
          export LLVM_CONFIG=/opt/homebrew/opt/llvm@18/bin/llvm-config
          export SDKROOT=$(xcrun --show-sdk-path)
          ./build.sh

      - name: Build on Windows
        if: runner.os == 'Windows'
        run: |
          # 设置编译器环境
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          $vcvarsPath = "$vsPath\VC\Auxiliary\Build\vcvars64.bat"
          
          # 生成构建命令脚本
          @"
          @echo off
          call "$vcvarsPath"
          set LLVM_CONFIG=C:\Program Files\LLVM\bin\llvm-config.exe
          bash build.sh
          "@ | Out-File -FilePath build.cmd -Encoding ASCII
          
          # 执行构建
          cmd /c build.cmd

      - name: Verify LLVM installation
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            /opt/homebrew/opt/llvm@18/bin/llvm-config --version
          elif [ "$RUNNER_OS" == "Linux" ]; then
            llvm-config-18 --version
          else
            echo "Windows verification not implemented"
          fi

      - name: Package artifacts
        run: |
          mkdir -p artifacts
          cp -r bin lib artifacts || true
          tar -czvf artifacts.tar.gz artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-build
          path: artifacts.tar.gz